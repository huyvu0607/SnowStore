@model IEnumerable<ClothingStore.Models.Product>

@{
    ViewData["Title"] = "SnowClothes - Shop Thời Trang Mùa Đông";
    var categories = ViewBag.Categories as List<ClothingStore.Models.Category>;
    var currentCategoryId = ViewBag.CurrentCategoryId as int?;
    var searchTerm = ViewBag.SearchTerm as string;
}


<!-- Categories Filter -->
<div class="categories-section">
    <div class="container">
        <div class="categories-title">
            <i class="fas fa-snowflake"></i>
            Danh mục sản phẩm
        </div>
        <div class="categories-list">
            <a href="@Url.Action("Index", new { searchTerm = searchTerm })"
               class="category-btn @(currentCategoryId == null ? "active" : "")">
                <i class="fas fa-th-large"></i>
                Tất cả
            </a>
            @if (categories != null)
            {
                @foreach (var category in categories)
                {
                    <a href="@Url.Action("Index", new { categoryId = category.CategoryId, searchTerm = searchTerm })"
                       class="category-btn @(currentCategoryId == category.CategoryId ? "active" : "")">
                        <i class="fas fa-tag"></i>
                        @category.CategoryName
                    </a>
                }
            }
        </div>
    </div>
</div>

<!-- Products Section -->
<div class="container">
    <div class="products-section">
        <!-- Section Header -->
        <div class="section-header">
            <div class="container">
                <h1 class="section-title">
                    <i class="fas fa-tshirt"></i>
                    Bộ sưu tập Wave To Earth
                </h1>
                <p class="section-subtitle">
                    Khám phá những món đồ thời trang và phong cách 
                    (@Model.Count() sản phẩm)
                </p>
            </div>
        </div>

        @if (Model.Any())
        {
            <div class="products-grid">
                @foreach (var product in Model)
                {
                    var primaryImage = product.ProductImages?.FirstOrDefault(pi => pi.IsPrimary == true)
                    ?? product.ProductImages?.FirstOrDefault();

                    <div class="product-card fade-in" onclick="openProductPopup(@product.ProductId)" 
                         style="animation-delay: @(Model.ToList().IndexOf(product) * 0.1)s">
                        
                        <div class="product-image-container">
                            @if (primaryImage != null)
                            {
                                <img src="@primaryImage.ImageUrl" 
                                     alt="@product.ProductName" 
                                     class="product-image"
                                     loading="lazy">
                            }
                            else
                            {
                                <div class="product-image no-image">
                                    <i class="fas fa-image"></i>
                                    <span>Không có hình ảnh</span>
                                </div>
                            }
                            
                            <!-- Product overlay on hover -->
                            <div class="product-overlay">
                                <div class="overlay-actions">
                                    <button class="action-btn view-btn" onclick="event.stopPropagation(); openProductPopup(@product.ProductId)">
                                        <i class="fas fa-eye"></i>
                                        Xem chi tiết
                                    </button>
                                </div>
                            </div>
                        </div>

                        <div class="product-info">
                            <h3 class="product-name" title="@product.ProductName">
                                @product.ProductName
                            </h3>
                            
                            <div class="product-price">
                                @product.Price.ToString("N0") ₫
                            </div>
                            
                            <div class="product-meta">
                                <span class="product-category">
                                    <i class="fas fa-tag"></i>
                                    @product.Category?.CategoryName
                                </span>
                                
                                @if (product.StockQuantity.HasValue)
                                {
                                    <span class="stock-info @(product.StockQuantity > 10 ? "stock-ok" : product.StockQuantity > 0 ? "stock-low" : "stock-out")">
                                        @if (product.StockQuantity > 0)
                                        {
                                            <i class="fas fa-check-circle"></i>
                                            <span>Còn @product.StockQuantity</span>
                                        }
                                        else
                                        {
                                            <i class="fas fa-times-circle"></i>
                                            <span>Hết hàng</span>
                                        }
                                    </span>
                                }
                            </div>

                            <!-- Additional product info -->
                            <div class="product-details">
                                @if (!string.IsNullOrEmpty(product.Size))
                                {
                                    <span class="detail-tag">
                                        <i class="fas fa-ruler"></i>
                                        @product.Size
                                    </span>
                                }
                                @if (!string.IsNullOrEmpty(product.Color))
                                {
                                    <span class="detail-tag">
                                        <i class="fas fa-palette"></i>
                                        @product.Color
                                    </span>
                                }
                            </div>
                        </div>
                    </div>
                }
            </div>

            <!-- Load more button (if needed for pagination) -->
            @if (ViewBag.HasMoreProducts == true)
            {
                <div class="load-more-section">
                    <button class="load-more-btn" onclick="loadMoreProducts()">
                        <i class="fas fa-plus"></i>
                        Xem thêm sản phẩm
                    </button>
                </div>
            }
        }
        else
        {
            <!-- Empty State -->
            <div class="empty-state">
                <div class="empty-icon">
                    <i class="fas fa-snowman"></i>
                </div>
                <h3>Không tìm thấy sản phẩm</h3>
                <p>
                    @if (!string.IsNullOrEmpty(searchTerm))
                    {
                        <span>Không có sản phẩm nào phù hợp với từ khóa "<strong>@searchTerm</strong>"</span>
                    }
                    else if (currentCategoryId.HasValue)
                    {
                        <span>Danh mục này hiện chưa có sản phẩm nào</span>
                    }
                    else
                    {
                        <span>Hiện tại chưa có sản phẩm nào</span>
                    }
                </p>
                <div class="empty-actions">
                    <a href="@Url.Action("Index")" class="btn-primary">
                        <i class="fas fa-home"></i>
                        Về trang chủ
                    </a>
                    @if (!string.IsNullOrEmpty(searchTerm) || currentCategoryId.HasValue)
                    {
                        <a href="@Url.Action("Index")" class="btn-secondary">
                            <i class="fas fa-times"></i>
                            Xóa bộ lọc
                        </a>
                    }
                </div>
            </div>
        }
    </div>
</div>

<!-- Product Detail Popup -->
<div id="productPopup" class="popup-overlay" onclick="closePopup(event)">
    <div class="popup-content" onclick="event.stopPropagation()">
        <!-- Content will be loaded dynamically by JavaScript -->
    </div>
</div>

<!-- Floating Winter Elements -->
<div class="winter-elements">
    <!-- Decorative snowflakes -->
    <div class="floating-snowflake" style="top: 20%; left: 10%; animation-delay: 0s;">❄</div>
    <div class="floating-snowflake" style="top: 60%; left: 85%; animation-delay: 2s;">❅</div>
    <div class="floating-snowflake" style="top: 80%; left: 20%; animation-delay: 4s;">❄</div>
</div>

@section Scripts {
    <script src="~/js/snowclothes.js"></script>
    
    <script>
        // Additional inline scripts for specific page functionality
        
        // Load more products function
        window.loadMoreProducts = function() {
            const button = document.querySelector('.load-more-btn');
            const originalText = button.innerHTML;
            
            button.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Đang tải...';
            button.disabled = true;
            
            // Here you would make an AJAX call to load more products
            // Example implementation:
            setTimeout(() => {
                // Simulate loading more products
                button.innerHTML = originalText;
                button.disabled = false;
                
                // You could append new products to the grid here
                console.log('Loading more products...');
            }, 2000);
        };
        
        // Close popup function
        window.closePopup = function(event) {
            if (event.target.classList.contains('popup-overlay')) {
                closeProductPopup();
            }
        };
        
        // Search enhancement for this page
        document.addEventListener('DOMContentLoaded', function() {
            // Add search result highlighting if there's a search term
            const searchTerm = '@Html.Raw(searchTerm)';
            if (searchTerm && searchTerm.length > 0) {
                highlightSearchResults(searchTerm);
            }
            
            // Add category active state persistence
            persistCategoryState();
            
            // Initialize product card animations
            initializeProductAnimations();
        });
        
        function highlightSearchResults(term) {
            const productNames = document.querySelectorAll('.product-name');
            productNames.forEach(element => {
                const text = element.textContent;
                const regex = new RegExp(`(${term})`, 'gi');
                const highlighted = text.replace(regex, '<mark style="background: var(--frost-blue); color: var(--deep-blue); padding: 0.1em 0.2em; border-radius: 3px;">$1</mark>');
                element.innerHTML = highlighted;
            });
        }
        
        function persistCategoryState() {
            // Add visual feedback for active category
            const activeCategory = document.querySelector('.category-btn.active');
            if (activeCategory) {
                activeCategory.style.boxShadow = '0 4px 12px rgba(74, 144, 226, 0.3)';
            }
        }
        
        function initializeProductAnimations() {
            // Add intersection observer for product cards
            if ('IntersectionObserver' in window) {
                const observer = new IntersectionObserver((entries) => {
                    entries.forEach(entry => {
                        if (entry.isIntersecting) {
                            entry.target.classList.add('animate-in');
                            observer.unobserve(entry.target);
                        }
                    });
                }, {
                    threshold: 0.1,
                    rootMargin: '0px 0px -50px 0px'
                });
                
                document.querySelectorAll('.product-card').forEach(card => {
                    observer.observe(card);
                });
            }
        }
        
        // Analytics tracking (optional)
        function trackProductView(productId, productName) {
            // Track product views for analytics
            console.log('Product viewed:', { id: productId, name: productName });
            
            // Example: Google Analytics
            // gtag('event', 'view_item', {
            //     'item_id': productId,
            //     'item_name': productName,
            //     'item_category': 'Clothing'
            // });
        }
        
        // Override the openProductPopup to include analytics
        const originalOpenProductPopup = window.openProductPopup;
        window.openProductPopup = function(productId) {
            // Find product name for tracking
            const productCard = document.querySelector(`[onclick*="${productId}"]`);
            const productName = productCard ? productCard.querySelector('.product-name').textContent : 'Unknown';
            
            trackProductView(productId, productName);
            
            // Call original function
            return originalOpenProductPopup(productId);
        };
    </script>
    
    <!-- Additional CSS for floating elements -->
    <style>
        .winter-elements {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            pointer-events: none;
            z-index: 1;
            overflow: hidden;
        }
        
        .floating-snowflake {
            position: absolute;
            font-size: 1.5rem;
            color: rgba(135, 206, 235, 0.4);
            animation: float 6s ease-in-out infinite;
            pointer-events: none;
        }
        
        @@keyframes float {
            0%, 100% {
                transform: translateY(0px) rotate(0deg);
                opacity: 0.4;
            }
            50% {
                transform: translateY(-20px) rotate(180deg);
                opacity: 0.8;
            }
        }
        
        .animate-in {
            animation: slideInUp 0.6s ease forwards;
        }
        
        @@keyframes slideInUp {
            from {
                opacity: 0;
                transform: translateY(30px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }
        
        .product-overlay {
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: linear-gradient(135deg, rgba(74, 144, 226, 0.9), rgba(44, 90, 160, 0.9));
            opacity: 0;
            transition: all 0.3s ease;
            display: flex;
            align-items: center;
            justify-content: center;
            border-radius: 15px 15px 0 0;
        }
        
        .product-card:hover .product-overlay {
            opacity: 1;
        }
        
        .overlay-actions {
            transform: translateY(20px);
            transition: transform 0.3s ease;
        }
        
        .product-card:hover .overlay-actions {
            transform: translateY(0);
        }
        
        .no-image {
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            color: var(--text-light);
            background: var(--ice-blue);
        }
        
        .no-image i {
            font-size: 2rem;
            margin-bottom: 0.5rem;
            color: var(--frost-blue);
        }
        
        .product-details {
            display: flex;
            gap: 0.5rem;
            margin-top: 0.5rem;
            flex-wrap: wrap;
        }
        
        .detail-tag {
            background: var(--ice-blue);
            color: var(--deep-blue);
            padding: 0.2rem 0.6rem;
            border-radius: 12px;
            font-size: 0.75rem;
            font-weight: 500;
            display: flex;
            align-items: center;
            gap: 0.25rem;
        }
        
        .detail-tag i {
            font-size: 0.7rem;
        }
        
        .load-more-section {
            text-align: center;
            margin-top: 3rem;
        }
        
        .load-more-btn {
            background: var(--gradient-primary);
            color: var(--snow-white);
            border: none;
            padding: 1rem 2rem;
            border-radius: 25px;
            font-size: 1rem;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
            display: inline-flex;
            align-items: center;
            gap: 0.5rem;
        }
        
        .load-more-btn:hover {
            background: var(--deep-blue);
            transform: translateY(-2px);
            box-shadow: var(--shadow-medium);
        }
        
        .load-more-btn:disabled {
            opacity: 0.7;
            cursor: not-allowed;
            transform: none;
        }
        
        .empty-actions {
            display: flex;
            gap: 1rem;
            justify-content: center;
            margin-top: 2rem;
            flex-wrap: wrap;
        }
        
        .btn-primary, .btn-secondary {
            padding: 0.75rem 1.5rem;
            border-radius: 25px;
            text-decoration: none;
            font-weight: 600;
            display: inline-flex;
            align-items: center;
            gap: 0.5rem;
            transition: all 0.3s ease;
        }
        
        .btn-primary {
            background: var(--gradient-primary);
            color: var(--snow-white);
        }
        
        .btn-primary:hover {
            background: var(--deep-blue);
            text-decoration: none;
            color: var(--snow-white);
            transform: translateY(-2px);
        }
        
        .btn-secondary {
            background: var(--ice-blue);
            color: var(--deep-blue);
            border: 2px solid var(--frost-blue);
        }
        
        .btn-secondary:hover {
            background: var(--frost-blue);
            text-decoration: none;
            color: var(--deep-blue);
            transform: translateY(-2px);
        }
        
        /* Responsive adjustments */
        @@media (max-width: 768px) {
            .floating-snowflake {
                display: none;
            }
            
            .empty-actions {
                flex-direction: column;
                align-items: center;
            }
            
            .btn-primary, .btn-secondary {
                width: 200px;
                justify-content: center;
            }
        }
        
        /* Loading state for product cards */
        .product-card.loading {
            position: relative;
            pointer-events: none;
        }
        
        .product-card.loading::after {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: rgba(255, 255, 255, 0.8);
            border-radius: 15px;
            display: flex;
            align-items: center;
            justify-content: center;
        }
        
        .product-card.loading::before {
            content: '';
            position: absolute;
            top: 50%;
            left: 50%;
            width: 30px;
            height: 30px;
            border: 3px solid var(--frost-blue);
            border-top: 3px solid var(--winter-blue);
            border-radius: 50%;
            animation: spin 1s linear infinite;
            transform: translate(-50%, -50%);
            z-index: 10;
        }
    </style>
}